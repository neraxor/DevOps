name: .NET CI and Docker Build

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:

jobs:
  build-and-push:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout repository
      uses: actions/checkout@v3

    - name: Setup .NET
      uses: actions/setup-dotnet@v2
      with:
        dotnet-version: '8.0.x'

    - name: Restore dependencies
      run: dotnet restore DevOps.sln

    - name: Build
      run: dotnet build DevOps.sln --no-restore

    - name: Run tests
      run: dotnet test DevOps.sln --no-build --verbosity normal

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v2

    - name: Log in to Docker Hub
      uses: docker/login-action@v2
      with:
        username: ${{ secrets.DOCKER_HUB_USERNAME }}
        password: ${{ secrets.DOCKER_HUB_ACCESS_TOKEN }}

    - name: Build and push Docker image
      uses: docker/build-push-action@v4
      with:
        context: ./DevOps
        file: ./DevOps/Dockerfile
        push: true
        tags: ${{ secrets.DOCKER_HUB_USERNAME }}/devops:latest

    - name: Log out from Docker Hub
      run: docker logout

    - name: Log in to Portainer
      id: portainer-login
      run: |
        echo "Logging in to Portainer..."
        AUTH_RESPONSE=$(curl -s -X POST -H "Content-Type: application/json" -d '{"username":"${{ secrets.PORTAINER_USERNAME }}","password":"${{ secrets.PORTAINER_PASSWORD }}"}' ${{ secrets.PORTAINER_URL }}/api/auth)
        echo "::set-output name=jwt::$(echo $AUTH_RESPONSE | jq -r .jwt)"

    - name: Get Portainer Stack ID
      id: get-stack-id
      run: |
        echo "Fetching stacks from Portainer..."
        RESPONSE=$(curl -s -H "Authorization: Bearer ${{ steps.portainer-login.outputs.jwt }}" ${{ secrets.PORTAINER_URL }}/api/stacks)
        STACK_ID=$(echo $RESPONSE | jq -r '.[] | select(.Name=="devops-stack") | .Id')
        echo "::set-output name=stack_id::$STACK_ID"

    - name: Update Portainer stack
      run: |
        echo "Updating stack with ID: ${{ steps.get-stack-id.outputs.stack_id }}"
        UPDATE_URL="${{ secrets.PORTAINER_URL }}/api/stacks/${{ steps.get-stack-id.outputs.stack_id }}?endpointId=2"
        COMPOSE_FILE_CONTENT=$(cat docker-compose.yml | sed 's/"/\\"/g' | sed 's/$/\\n/' | tr -d '\n')
        UPDATE_RESPONSE=$(curl -s -X PUT -H "Authorization: Bearer ${{ steps.portainer-login.outputs.jwt }}" -H "Content-Type: application/json" --data "{\"StackFileContent\": \"${COMPOSE_FILE_CONTENT}\"}" $UPDATE_URL)
        echo "Update Response: $UPDATE_RESPONSE"

    - name: Restart Portainer stack
      run: |
        echo "Restarting stack with ID: ${{ steps.get-stack-id.outputs.stack_id }}"
        RESTART_URL="${{ secrets.PORTAINER_URL }}/api/endpoints/2/docker/containers/${{ steps.get-stack-id.outputs.stack_id }}/restart"
        RESTART_RESPONSE=$(curl -s -X POST -H "Authorization: Bearer ${{ steps.portainer-login.outputs.jwt }}" $RESTART_URL)
        echo "Restart Response: $RESTART_RESPONSE"
